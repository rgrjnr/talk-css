=================================================

Ol√°, antes de come√ßar eu vou me apresentar. Meu nome √© Roger e esse sou eu cantando no karaoke, eu s√≥ n√£o to dan√ßando loucamente porque infelizmente n√£o estava tocando Mar√≠lia Mendon√ßa na hora;

Sou estudante de Design e desde o come√ßo da faculdade eu me aproximei da programa√ß√£o, quando eu comecei foi com o HTML e CSS s√≥ e mais recentemente eu comecei a aprender de fato JS, Python e mais pro back o PHP (n√£o me julguem hahah)

=================================================

Bom, hoje a gente vai falar de porque meu css n√£o √© escal√°vel. Eu vou falar um pouquinho dos principais problemas que a galera tem com CSS e dar algumas dicas de como resolver.

O CSS √© uma linguagem muito pol√™mica, muita gente n√£o curte, muita gente odeia e, realmente, CSS √© uma arte, √© uma linguagem muito m√£ezona, d√° pra fazer muita coisa mas √© dif√≠cil fazer direito e por isso tem muita gente que tem a sensa√ß√£o de ficar mexendo no c√≥digo aleatoriamente at√© ele funcionar.

Mas hist√≥ria do CSS, e na verdade a hist√≥ria da Internet √© meio contrubada e pol√™mica tamb√©m.

E se a gente parar pra pensar a internet n√£o √© t√£o velha assim. O Tim Bernes Lee soltou a primeira vers√£o do World Wide Web em 1990.

Nessa √©poca o browser s√≥ renderizava texto e os desenvolvedores n√£o tinham controle sob essa rederiza√ß√£o tamb√©m.

Em 1993, o Marc Andressen, que na √©poca era estudante na Universidade de Illinois, resolve sugerir uma nova tag opcional para o html <img>. Mas da√≠, preocupado com uma "otimiza√ß√£o precoce" o Tim Bernes Lee acha furada, porque ele fala que isso vai dar abertura pra criar outras um milh√£o de tags pra cada tipo de conte√∫do e ele fala "Que tal <entity>?"

Bom, o Marc s√≥ tacou o foda-se e lan√ßou a tag no Mosaic, sendo o primeiro navegador a suportar imagens.

Seguindo a cronologia em 1995 a Microsoft solta a primeira vers√£o do Internet Explorer

E em 1996 √© publicada a primeira spec do CSS 1 que s√≥ vai ser implementada porcamente no Internet Explorer 3. 

Mas da√≠ o CSS s√≥ vai ficar us√°vel de fato a partir de 2000. E nesse meio tempo o CSS n√£o foi a linguagem escolhidade desde o come√ßo e, na verdade, o Netscape foi para um caminho contr√°rio, eles lan√ßaram o JSSS. 

O Netscape convertia o CSS para JS que ent√£o era renderizado como estilo no browser, ent√£o eles resolveram abrir essa interface para os desenvolvedores que quisessem programar direto no JS sem uma terceira linguagem. Eu particularmente n√£o mexo com frameworks, mas pelo que eu estive vendo isso lembra bastante a aplica√ß√£o de CSS dentro do JS como rola no React, por exemplo, ent√£o isso n√£o √© exatamente novo tamb√©m. Mas o Netscape foi extramemente criticado por seguir contra a padroniza√ß√£o da WEB e o JSSS foi descontinuado no ano 2000 e o Netscape seguiu na sua silenciosa e lenta morte.

(

S√≥ antes de come√ßar eu queria fazer uma diferencia√ß√£o entre as tr√™s linguagens pra gente ficar na mesma p√°gina.

# HTML - Marca√ß√£o
# JS/PHP/RUBY - Programa√ß√£o
# CSS - Estilo

Eu vou falar um pouco mais a fundo no final da apresenta√ß√£o, mas eu queria deixa isso claro agora porque essa divis√£o vai facilitar muito na hora de criar o CSS.

)

Bom, essa hist√≥ria mostra dois grandes problemas que rolaram e rolam at√© hoje. O primeiro da mistura de linguagens, que foi uma discuss√£o meio que desde sempre e a segunda, a falta de estrat√©gia/organiza√ß√£o, j√° que at√© pouco tempo o CSS n√£o tinha padroniza√ß√£o e cada browser implementava de um jeito.

=================================================

Um dos principais motivos pelo qual as pessoas desgostam do CSS √© na verdade geralmente pela falta de planejamento. Como eu j√° disse o CSS √© uma linguagem m√£ezona, √© muito f√°cil de come√ßar e quando voc√™ v√™ voc√™ j√° perdeu controle e ta criando uma classe "coisa-azul-um-pouco-maior-pra-nao-quebrar".

Quando a gente est√° trabalhando com linguagens de programa√ß√£o a gente para um tempo para pensar a arquitetura do software e para o CSS n√£o pode ser diferente. A gente precisa pensar a estrutura do nosso estilo num contexto geral do Design System da nossa aplica√ß√£o.

A parte boa √© que muita gente j√° quebrou muito a cabe√ßa para padronizar e desenvolver boas pr√°ticas no que diz respeito ao HTML e CSS.

Uma coisa muito comum √© ficar com um CSS gigantesco que al√©m de ser super ineficiente e deixar a manuten√ß√£o do estilo imposs√≠vel ao longo do tempo. E honestamente eu aprendi que existiam frameworks muito recentemente, porque na verdade eu acabei aprendendo isso na marra e fu√ßando design system de outras empresas, em especial da IBM que √© um xuxuzinho, super bem documentado.

Uma t√©cnica para organizar o CSS √© o ITCSS que basicamente divide o CSS por fun√ß√µes

Variables - cores, espa√ßamento, tempo, fontes, etc
Mixins - box-shadow()
Generic - reset
Elements - estilo para tags 
Componentes - maior parte do trabalho rola aqui
Helper classes

O legal dessa divis√£o √© que ela d√° uma vis√£o big picture do projeto todo. Ela ajuda a identificar tamb√©m o qu√£o espec√≠fico as coisas s√£o.

Dentro desse sistema a primeira regra √©:

ID est√° proibido

ID a gente vai deixar para o JS achar os elementos no DOM, a gente tem que pensar que o ID √© uma identifica√ß√£o √∫nica, diferente de uma classe e a gente n√£o quer deixar o CSS com esse n√≠vel de especificidade.

Nas duas primeiras camadas a gente n√£o vai imprimir uma linha de CSS.

VARIABLES ------------------------------------------------------------

//-------------------------------------------
// üåå Colors
// ------------------------------------------

$color__brand-01:     #912B96;
$color__brand-02:     #5A205F;
$color__brand-03:     #FEEEFE;

$color__yellow-01:    #EBC221;
$color__red-01:       #BC1919;
$color__green-01:     #529107;
$color__blue-01:      #516bf0;

$color__black:        #15181A;
$color__text-01:      #2E3538;
$color__dark-04:      #495257;
$color__dark-03:      #656F75;
$color__dark-02:      #828E94;
$color__dark-01:      #B3C0C7;
$color__light-04:     #CEDAE0;
$color__light-03:     #DDE6EB;
$color__light-02:     #EBF2F5;
$color__light-01:     #F5F9FA;
$color__white:        #FFFFFF;


//-------------------------------------------
// üåå Spacing
// ------------------------------------------
//
//   Size in px based on 16px base
//
//   Spacing Scale
//   ==========================================
//   3xs  ||  2px
//   2xs  ||  4px
//   xs   ||  8px
//   sm   ||  12px
//   md   ||  16px
//   lg   ||  24px
//   xl   ||  32px
//   2xl  ||  40px
//   3xl  ||  48px
//   ==========================================
//
//   Layout Scale
//   ==========================================
//   2xs  ||  16px
//   xs   ||  24px
//   sm   ||  32px
//   md   ||  48px
//   lg   ||  64px
//   xl   ||  96px
//   2xl  ||  160px
//   ==========================================

$spacing-baseline: 1rem !default;

$spacing-3xs: $spacing-baseline * 0.125 !default;
$spacing-2xs: $spacing-baseline * 0.25 !default;
$spacing-xs: $spacing-baseline * 0.5 !default;
$spacing-sm: $spacing-baseline * 0.75 !default;
$spacing-md: $spacing-baseline !default;
$spacing-lg: $spacing-baseline * 1.5 !default;
$spacing-xl: $spacing-baseline * 2 !default;
$spacing-2xl: $spacing-baseline * 2.5 !default;
$spacing-3xl: $spacing-baseline * 3 !default;

$layout-2xs: $spacing-baseline !default;
$layout-xs: $spacing-baseline * 1.5 !default;
$layout-sm: $spacing-baseline * 2 !default;
$layout-md: $spacing-baseline * 3 !default;
$layout-lg: $spacing-baseline * 4 !default;
$layout-xl: $spacing-baseline * 6 !default;
$layout-2xl: $spacing-baseline * 10 !default;


//-------------------------------------------
// üåå Typography
// ------------------------------------------

$font-family-title: 'Museo', serif !default;
$font-family-main: 'Raleway', sans-serif !default;

$base-font-size: 16px !default; // Default, Use with em() and rem() functions

$font-scale-factor: 1;

$typescale-map: (
  'giga': 4.75rem,
  'mega': 3.375rem,
  'alpha': 2.25rem,
  'beta': 1.75rem,
  'gamma': 1.25rem,
  'delta': 1.125rem,
  'epsilon': 1rem,
  'zeta': 0.875rem,
  'omega': 0.75rem,
  'caption': 0.75rem,
  'legal': 0.6875rem,
  'p': 1rem
);

@mixin typescale($size) {
  @if map-has-key($typescale-map, $size) {
    font-size: $font-scale-factor * map-get($typescale-map, $size);
  } @else {
    @warn 'This is not a step of type scale!';
  }
}


MIXINS --------------------------------------------------------------------
@mixin css3-prefix($property, $value) {
  -webkit-#{$property}: #{$value};
   -khtml-#{$property}: #{$value};
     -moz-#{$property}: #{$value};
      -ms-#{$property}: #{$value};
       -o-#{$property}: #{$value};
          #{$property}: #{$value};
}

@mixin input-placeholder {
    &.placeholder { @content; }
    &:-moz-placeholder { @content; }
    &::-moz-placeholder { @content; }
    &:-ms-input-placeholder { @content; }
    &::-webkit-input-placeholder { @content; }
}

@mixin box-sizing($type: border-box) {
  @include css3-prefix('box-sizing', $type);
}

@mixin box-shadow($offset, $opacity: 0.1) {
  -webkit-box-shadow: 0px $offset 2*$offset 0px rgba(0,0,0,$opacity);
     -moz-box-shadow: 0px $offset 2*$offset 0px rgba(0,0,0,$opacity);
          box-shadow: 0px $offset 2*$offset 0px rgba(0,0,0,$opacity);
}

GENERIC --------------------------------------------------
Reset
Grids


ELEMENTS -------------------------------------------------

::selection {
    background: rgba(145, 43, 150, 0.7);
    color: white;
}

a {
	color: $color__brand-01;
}

body {
	font-family: $font-family-main;
	@include typescale(p);
}


h1 { @include typescale(alpha);		font-weight: 300;	}
h2 { @include typescale(beta);		font-weight: 300;	}
h3 { @include typescale(gamma);		font-weight: 300;	}
h4 { @include typescale(delta);							}
h5 { @include typescale(epsilon);						}
h6 { @include typescale(epsilon);						}

@media only screen and (min-width: 48em) {
h1 { @include typescale(mega);		font-weight: 300;	}
h2 { @include typescale(alpha);		font-weight: 300;	}
h3 { @include typescale(beta);		font-weight: 300;	}
h4 { @include typescale(gamma);							}
h5 { @include typescale(delta);							}
h6 { @include typescale(epsilon);						}
}

p {
	@include typescale(p);
	@include line-height(body);
}


COMPONENTES ------------------------------------------------
O grosso

HELPER CLASSES ---------------------------------------------

<table class="mc-table"> <thead> <tr class="odd"> <th>Class</th> <th>Phone</th> <th>Tablet</th> <th>Desktop</th> </tr> </thead> <tbody> <tr class="odd"> <td><code class="classname">show-phone</code></td> <td class="c-responsiveUtility--visible">Visible</td> <td><span class="dim6">Hidden</span></td> <td><span class="dim6">Hidden</span></td> </tr> <tr class="even"> <td><code class="classname">show-mobile</code></td> <td class="c-responsiveUtility--visible">Visible</td> <td class="c-responsiveUtility--visible">Visible</td> <td><span class="dim6">Hidden</span></td> </tr> <tr class="odd"> <td><code class="classname">hide-phone</code></td> <td><span class="dim6">Hidden</span></td> <td class="c-responsiveUtility--visible">Visible</td> <td class="c-responsiveUtility--visible">Visible</td> </tr> <tr class="even"> <td><code class="classname">hide-mobile</code></td> <td><span class="dim6">Hidden</span></td> <td><span class="dim6">Hidden</span></td> <td class="c-responsiveUtility--visible">Visible</td> </tr> <tr class="odd"> <td><code class="classname">hide-desktop</code></td> <td class="c-responsiveUtility--visible">Visible</td> <td class="c-responsiveUtility--visible">Visible</td> <td><span class="dim6">Hidden</span></td> </tr> </tbody> </table>


.text-left { text-align: left!important; }
.text-right { text-align: right!important; }
.text-center { text-align: center!important; }

.no-margins { margin: 0!important; }

.no-mb { margin-bottom: 0!important; }
.no-mt { margin-top: 0!important; }
.no-ml { margin-left: 0!important; }
.no-mr { margin-right: 0!important; }

.mt-xl { margin-top:    $spacing-xl!important; }
.mb-xl { margin-bottom: $spacing-xl!important; }
.ml-xl { margin-left:   $spacing-xl!important; }
.mr-xl { margin-right:  $spacing-xl!important; }

(...)

.mt-xs { margin-top:    $spacing-xs!important; }
.mb-xs { margin-bottom: $spacing-xs!important; }
.ml-xs { margin-left:   $spacing-xs!important; }
.mr-xs { margin-right:  $spacing-xs!important; }


Acho que a parte mais dificil de ser programador n√£o √© a l√≥gica, n√£o √© a matem√°tica n√£o √© nada disso. A parte mais dif√≠cil √© dar nomes as coisas. Quem nunca ficou na d√∫vida se chamava a vari√°vel de content ou de response. Essa √© a parte mais dif√≠cil.

E pra isso 


Settings ‚Äì used with preprocessors and contain font, colors definitions, etc.
Tools ‚Äì globally used mixins and functions. It‚Äôs important not to output any CSS in the first 2 layers.
Generic ‚Äì reset and/or normalize styles, box-sizing definition, etc. This is the first layer which generates actual CSS.
Elements ‚Äì styling for bare HTML elements (like H1, A, etc.). These come with default styling from the browser so we can redefine them here.
Objects ‚Äì class-based selectors which define undecorated design patterns, for example media object known from OOCSS
Components ‚Äì specific UI components. This is where majority of our work takes place and our UI components are often composed of Objects and Components
Utilities ‚Äì utilities and helper classes with ability to override anything which goes before in the triangle, eg. hide helper class






Porque de fato, √†s vezes √© muito f√°cil a gente perder a m√£o da nossa folha de estilo e acabar com isso:
.right,
.rtl .left,
.rtl #top .site-brand,
.rtl .cui-carousel-item,
.rtl .case-study-group .block,
.rtl fieldset label,
.rtl .column-1, .rtl .column-2,
.rtl .column-7, .rtl .column-8,
.rtl .column-9, .rtl .column-10,
.rtl .column-11, .rtl .column-12,
.rtl .column-13, .rtl .column-14,
.rtl .column-23, .rtl .column-24,
.rtl .feature .feature-text,
.rtl .feature .feature-block,
.rtl .header .header-inner,
.rtl .navigation-bar header,
.rtl .navigation-bar nav,
.rtl dl.inline dt,
.rtl .toolbar .btn,
.rtl .toolbar .dropdown-wrapper,
.rtl .btn-group a,
.rtl .input-list li label,
.rtl input[type="checkbox"],
.rtl input[type="radio"],
.rtl .navigation-bar header h1,
  float: right !important !important !important;
}
