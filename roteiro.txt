=================================================

Ol√°, antes de come√ßar eu vou me apresentar. Meu nome √© Roger e esse sou eu cantando no karaoke, eu s√≥ n√£o to dan√ßando loucamente porque infelizmente n√£o estava tocando Mar√≠lia Mendon√ßa na hora;

Sou estudante de Design e desde o come√ßo da faculdade eu me aproximei da programa√ß√£o, quando eu comecei foi com o HTML e CSS s√≥ e mais recentemente eu comecei a aprender de fato JS, Python e mais pro back o PHP (n√£o me julguem hahah)

=================================================

Bom, hoje a gente vai falar de porque meu css n√£o √© escal√°vel. Eu vou falar um pouquinho dos principais problemas que a galera tem com CSS e dar algumas dicas de como resolver.

O CSS √© uma linguagem muito pol√™mica, muita gente n√£o curte, muita gente odeia e, realmente, CSS √© uma arte, √© uma linguagem muito m√£ezona, d√° pra fazer muita coisa mas √© dif√≠cil fazer direito e por isso tem muita gente que tem a sensa√ß√£o de ficar mexendo no c√≥digo aleatoriamente at√© ele funcionar.

Mas hist√≥ria do CSS, e na verdade a hist√≥ria da Internet √© meio contrubada e pol√™mica tamb√©m.

E se a gente parar pra pensar a internet n√£o √© t√£o velha assim. O Tim Bernes Lee soltou a primeira vers√£o do World Wide Web em 1990.

Nessa √©poca o browser s√≥ renderizava texto e os desenvolvedores n√£o tinham controle sob essa rederiza√ß√£o tamb√©m.

Em 1993, o Marc Andressen, que na √©poca era estudante na Universidade de Illinois, resolve sugerir uma nova tag opcional para o html <img>. Mas da√≠, preocupado com uma "otimiza√ß√£o precoce" o Tim Bernes Lee acha furada, porque ele fala que isso vai dar abertura pra criar outras um milh√£o de tags pra cada tipo de conte√∫do e ele fala "Que tal <entity>?"

Bom, o Marc s√≥ tacou o foda-se e lan√ßou a tag no Mosaic, sendo o primeiro navegador a suportar imagens.

Seguindo a cronologia em 1995 a Microsoft solta a primeira vers√£o do karma de todos devs front-end, o Internet Explorer

E em 1996 √© publicada a primeira spec do CSS 1 que s√≥ vai ser implementada porcamente no Internet Explorer 3. 

Mas da√≠ o CSS s√≥ vai ficar us√°vel de fato a partir de 2000. E nesse meio tempo o CSS n√£o foi a linguagem escolhidade desde o come√ßo e, na verdade, o Netscape foi para um caminho contr√°rio, eles lan√ßaram o JSSS. 

O Netscape convertia o CSS para JS que ent√£o era renderizado como estilo no browser, ent√£o eles resolveram abrir essa interface para os desenvolvedores que quisessem programar direto no JS sem uma terceira linguagem.

 Eu particularmente n√£o mexo com frameworks, mas pelo que eu estive vendo isso lembra bastante a aplica√ß√£o de CSS dentro do JS como rola no React, por exemplo, ent√£o isso n√£o √© exatamente novo tamb√©m. 

 Mas o Netscape foi extramemente criticado por seguir contra a padroniza√ß√£o da WEB e o JSSS foi descontinuado no ano 2000 e o Netscape seguiu na sua silenciosa e lenta morte.

(

S√≥ antes de come√ßar eu queria fazer uma diferencia√ß√£o entre as tr√™s linguagens pra gente ficar na mesma p√°gina.

# HTML - Marca√ß√£o
# JS/PHP/RUBY - Programa√ß√£o
# CSS - Estilo

Eu vou falar um pouco mais a fundo no final da apresenta√ß√£o, mas eu queria deixa isso claro agora porque essa divis√£o vai facilitar muito na hora de criar o CSS.

Conturbado CSS nos HTML e JS
)

Bom, essa hist√≥ria mostra dois grandes problemas que rolaram e rolam at√© hoje. O primeiro da mistura de linguagens, que foi uma discuss√£o meio que desde sempre e a segunda, a falta de estrat√©gia/organiza√ß√£o, j√° que at√© pouco tempo o CSS n√£o tinha padroniza√ß√£o e cada browser implementava de um jeito.

=================================================

Um dos principais motivos pelo qual as pessoas desgostam do CSS √© na verdade geralmente pela falta de planejamento. Como eu j√° disse o CSS √© uma linguagem m√£ezona, √© muito f√°cil de come√ßar e quando voc√™ v√™ voc√™ j√° perdeu controle e ta criando uma classe "coisa-azul-um-pouco-maior-pra-nao-quebrar".

Porque de fato, √†s vezes √© muito f√°cil a gente perder a m√£o da nossa folha de estilo e acabar com isso:
.right,
.rtl .left,
.rtl #top .site-brand,
.rtl .cui-carousel-item,
.rtl .case-study-group .block,
.rtl fieldset label,
.rtl .column-1, .rtl .column-2,
.rtl .column-7, .rtl .column-8,
.rtl .column-9, .rtl .column-10,
.rtl .column-11, .rtl .column-12,
.rtl .column-13, .rtl .column-14,
.rtl .column-23, .rtl .column-24,
.rtl .feature .feature-text,
.rtl .feature .feature-block,
.rtl .header .header-inner,
.rtl .navigation-bar header,
.rtl .navigation-bar nav,
.rtl dl.inline dt,
.rtl .toolbar .btn,
.rtl .toolbar .dropdown-wrapper,
.rtl .btn-group a,
.rtl .input-list li label,
.rtl input[type="checkbox"],
.rtl input[type="radio"],
.rtl .navigation-bar header h1,
  float: right !important !important !important;
}

Quando a gente est√° trabalhando com linguagens de programa√ß√£o a gente para um tempo para pensar a arquitetura do software e para o CSS n√£o pode ser diferente. A gente precisa pensar a estrutura do nosso estilo num contexto geral do Design System da nossa aplica√ß√£o.

A parte boa √© que muita gente j√° quebrou muito a cabe√ßa para padronizar e desenvolver boas pr√°ticas no que diz respeito ao HTML e CSS.

Uma coisa muito comum √© ficar com um CSS gigantesco que al√©m de ser super ineficiente e deixar a manuten√ß√£o do estilo imposs√≠vel ao longo do tempo. E honestamente eu aprendi que existiam frameworks muito recentemente, porque na verdade eu acabei aprendendo isso na marra e fu√ßando design system de outras empresas, em especial da IBM que √© um xuxuzinho, super bem documentado.

Uma t√©cnica para organizar o CSS √© o ITCSS que basicamente divide o CSS por fun√ß√µes

Variables - cores, espa√ßamento, tempo, fontes, etc
Mixins - box-shadow()
Generic - reset
Elements - estilo para tags 
Componentes - maior parte do trabalho rola aqui
Helper classes

O legal dessa divis√£o √© que ela d√° uma vis√£o big picture do projeto todo. Ela ajuda a identificar tamb√©m o qu√£o espec√≠fico as coisas s√£o.

Dentro desse sistema a primeira regra √©:

1. ID est√° proibido

ID a gente vai deixar para o JS achar os elementos no DOM, a gente tem que pensar que o ID √© uma identifica√ß√£o √∫nica, diferente de uma classe e a gente n√£o quer deixar o CSS com esse n√≠vel de especificidade.

Nas duas primeiras camadas a gente n√£o vai imprimir uma linha de CSS.

VARIABLES ------------------------------------------------------------

//-------------------------------------------
// üåå Colors
// ------------------------------------------

$color__brand-01:     #912B96;
$color__brand-02:     #5A205F;
$color__brand-03:     #FEEEFE;

$color__yellow-01:    #EBC221;
$color__red-01:       #BC1919;
$color__green-01:     #529107;
$color__blue-01:      #516bf0;

$color__black:        #15181A;
$color__text-01:      #2E3538;
$color__dark-04:      #495257;
$color__dark-03:      #656F75;
$color__dark-02:      #828E94;
$color__dark-01:      #B3C0C7;
$color__light-04:     #CEDAE0;
$color__light-03:     #DDE6EB;
$color__light-02:     #EBF2F5;
$color__light-01:     #F5F9FA;
$color__white:        #FFFFFF;


//-------------------------------------------
// üåå Spacing
// ------------------------------------------
//
//   Size in px based on 16px base
//
//   Spacing Scale
//   ==========================================
//   3xs  ||  2px
//   2xs  ||  4px
//   xs   ||  8px
//   sm   ||  12px
//   md   ||  16px
//   lg   ||  24px
//   xl   ||  32px
//   2xl  ||  40px
//   3xl  ||  48px
//   ==========================================
//
//   Layout Scale
//   ==========================================
//   2xs  ||  16px
//   xs   ||  24px
//   sm   ||  32px
//   md   ||  48px
//   lg   ||  64px
//   xl   ||  96px
//   2xl  ||  160px
//   ==========================================

$spacing-baseline: 1rem !default;

$spacing-3xs: $spacing-baseline * 0.125 !default;
$spacing-2xs: $spacing-baseline * 0.25 !default;
$spacing-xs: $spacing-baseline * 0.5 !default;
$spacing-sm: $spacing-baseline * 0.75 !default;
$spacing-md: $spacing-baseline !default;
$spacing-lg: $spacing-baseline * 1.5 !default;
$spacing-xl: $spacing-baseline * 2 !default;
$spacing-2xl: $spacing-baseline * 2.5 !default;
$spacing-3xl: $spacing-baseline * 3 !default;

$layout-2xs: $spacing-baseline !default;
$layout-xs: $spacing-baseline * 1.5 !default;
$layout-sm: $spacing-baseline * 2 !default;
$layout-md: $spacing-baseline * 3 !default;
$layout-lg: $spacing-baseline * 4 !default;
$layout-xl: $spacing-baseline * 6 !default;
$layout-2xl: $spacing-baseline * 10 !default;


//-------------------------------------------
// üåå Typography
// ------------------------------------------

$font-family-title: 'Museo', serif !default;
$font-family-main: 'Raleway', sans-serif !default;

$base-font-size: 16px !default; // Default, Use with em() and rem() functions

$font-scale-factor: 1;

$typescale-map: (
  'giga': 4.75rem,
  'mega': 3.375rem,
  'alpha': 2.25rem,
  'beta': 1.75rem,
  'gamma': 1.25rem,
  'delta': 1.125rem,
  'epsilon': 1rem,
  'zeta': 0.875rem,
  'omega': 0.75rem,
  'caption': 0.75rem,
  'legal': 0.6875rem,
  'p': 1rem
);

@mixin typescale($size) {
  @if map-has-key($typescale-map, $size) {
    font-size: $font-scale-factor * map-get($typescale-map, $size);
  } @else {
    @warn 'This is not a step of type scale!';
  }
}


MIXINS --------------------------------------------------------------------
@mixin css3-prefix($property, $value) {
  -webkit-#{$property}: #{$value};
   -khtml-#{$property}: #{$value};
     -moz-#{$property}: #{$value};
      -ms-#{$property}: #{$value};
       -o-#{$property}: #{$value};
          #{$property}: #{$value};
}

@mixin input-placeholder {
    &.placeholder { @content; }
    &:-moz-placeholder { @content; }
    &::-moz-placeholder { @content; }
    &:-ms-input-placeholder { @content; }
    &::-webkit-input-placeholder { @content; }
}

@mixin box-sizing($type: border-box) {
  @include css3-prefix('box-sizing', $type);
}

@mixin box-shadow($offset, $opacity: 0.1) {
  -webkit-box-shadow: 0px $offset 2*$offset 0px rgba(0,0,0,$opacity);
     -moz-box-shadow: 0px $offset 2*$offset 0px rgba(0,0,0,$opacity);
          box-shadow: 0px $offset 2*$offset 0px rgba(0,0,0,$opacity);
}

GENERIC --------------------------------------------------
Reset
Grids


ELEMENTS -------------------------------------------------

::selection {
    background: rgba(145, 43, 150, 0.7);
    color: white;
}

a {
	color: $color__brand-01;
}

body {
	font-family: $font-family-main;
	@include typescale(p);
}


h1 { @include typescale(alpha);		font-weight: 300;	}
h2 { @include typescale(beta);		font-weight: 300;	}
h3 { @include typescale(gamma);		font-weight: 300;	}
h4 { @include typescale(delta);							}
h5 { @include typescale(epsilon);						}
h6 { @include typescale(epsilon);						}

@media only screen and (min-width: 48em) {
h1 { @include typescale(mega);		font-weight: 300;	}
h2 { @include typescale(alpha);		font-weight: 300;	}
h3 { @include typescale(beta);		font-weight: 300;	}
h4 { @include typescale(gamma);							}
h5 { @include typescale(delta);							}
h6 { @include typescale(epsilon);						}
}

p {
	@include typescale(p);
	@include line-height(body);
}


COMPONENTES ------------------------------------------------
O grosso. √â importante deixar eles separadinhos bonitinho

HELPER CLASSES ---------------------------------------------

<table class="mc-table"> <thead> <tr class="odd"> <th>Class</th> <th>Phone</th> <th>Tablet</th> <th>Desktop</th> </tr> </thead> <tbody> <tr class="odd"> <td><code class="classname">show-phone</code></td> <td class="c-responsiveUtility--visible">Visible</td> <td><span class="dim6">Hidden</span></td> <td><span class="dim6">Hidden</span></td> </tr> <tr class="even"> <td><code class="classname">show-mobile</code></td> <td class="c-responsiveUtility--visible">Visible</td> <td class="c-responsiveUtility--visible">Visible</td> <td><span class="dim6">Hidden</span></td> </tr> <tr class="odd"> <td><code class="classname">hide-phone</code></td> <td><span class="dim6">Hidden</span></td> <td class="c-responsiveUtility--visible">Visible</td> <td class="c-responsiveUtility--visible">Visible</td> </tr> <tr class="even"> <td><code class="classname">hide-mobile</code></td> <td><span class="dim6">Hidden</span></td> <td><span class="dim6">Hidden</span></td> <td class="c-responsiveUtility--visible">Visible</td> </tr> <tr class="odd"> <td><code class="classname">hide-desktop</code></td> <td class="c-responsiveUtility--visible">Visible</td> <td class="c-responsiveUtility--visible">Visible</td> <td><span class="dim6">Hidden</span></td> </tr> </tbody> </table>


.text-left { text-align: left!important; }
.text-right { text-align: right!important; }
.text-center { text-align: center!important; }

.no-margins { margin: 0!important; }

.mb-none { margin-bottom: 0!important; }
.mt-none { margin-top: 0!important; }
.ml-none { margin-left: 0!important; }
.mr-none { margin-right: 0!important; }

.mt-xl { margin-top:    $spacing-xl!important; }
.mb-xl { margin-bottom: $spacing-xl!important; }
.ml-xl { margin-left:   $spacing-xl!important; }
.mr-xl { margin-right:  $spacing-xl!important; }

(...)

.mt-xs { margin-top:    $spacing-xs!important; }
.mb-xs { margin-bottom: $spacing-xs!important; }
.ml-xs { margin-left:   $spacing-xs!important; }
.mr-xs { margin-right:  $spacing-xs!important; }



/// BLEH
.role-stat h1,
.role-stat h2,
.role-su p,
.role-su a {
  color: #FFF;
}

.features-1 h1,
.features-1 h2,
.features-1 p,
.features-3 h2,
.features-3 p {
  color: #FFF;
}

.features-1 a,
.features-2 a,
.features-3 a {
  color: #FFF;
  text-decoration: underline;
}

.feature-4 a,
.feature-4 a,
.feature-4 a {
  text-decoration: underline;
}

///TOPZEIRA
.text-white {
  color: #FFF;
}

.text-underline {
  text-decoration: underline;
}

=================================================

Acho que a parte mais dificil de ser programador n√£o √© a l√≥gica, n√£o √© a matem√°tica n√£o √© nada disso. A parte mais dif√≠cil √© dar nomes as coisas. Quem nunca ficou na d√∫vida se chamava a vari√°vel de content ou de response. Essa √© a parte mais dif√≠cil.

E pra isso uma t√©cnica que ajuda muito √© o BEM

BEM significa

Bloco Elemento Modificador

(FAZER FOTO ESQUEMA)

Essa estrutura na verdade ela √© bem abrangente, a gente tem blocos que podem ter v√°rios elementos e esses elementos em si podem ser outros blocos

EXEMPLO DO BOTAO -------------------------

.nz--btn {
	display: inline-block;
	padding: $spacing-sm $spacing-md;
	border: 3px solid black;
	font-family: $font-family-title;
	font-weight: bold;
	text-decoration: none;
	white-space: nowrap;

	.nz--btn__icon {
		position: relative;
		vertical-align: middle;
		top: -1px;
		width: rem(16px);
	}
	
	&:disabled {
		cursor: not-allowed;
		opacity: 0.5;
	}
}


.nz--btn--primary {
	@include button-theme($color__brand-01, $color__brand-01, $color__white, $color__brand-02, $color__white, $color__brand-01);
}

.nz--btn--secondary {
	@include button-theme(transparent, $color__brand-01, $color__brand-01, $color__brand-01, $color__white, $color__brand-01) ;
}

.nz--btn--ghost {
	@include button-theme(transparent, $color__white, $color__white, $color__white, $color__brand-01, $color__white); 
}

@mixin button-theme($bg-color, $border-color, $font-color, $hover-bg-color, $hover-font-color, $icon-color) {
  background-color: $bg-color;
  border-width: $button-border-width;
  border-style: solid;
  border-color: $border-color;
  color: $font-color;

  &:hover {
    color: $hover-font-color;
  }

  &:focus,
  &:hover {
    background-color: $hover-bg-color;
  }

  &:focus {
    border: $button-border-width solid $hover-bg-color;
    outline: $button-border-width solid $hover-bg-color;
    color: $font-color;
  }

  &:disabled:hover,
  &:disabled:focus {
    background-color: $bg-color;

  }

  &:active {
    background-color: darken($bg-color, 10%);
  }

  .nz--btn__icon {
    fill: $icon-color;
  }

}

.nz--btn--small {
   padding: $spacing-xs $spacing-sm;
}

.nz--btn--big {
	@include typescale(delta);
}




<div class="nz--radio-wrapper">
  <input id="option-blue" 
  	class="nz--radio"
  	type="radio"
  	value="blue"
  	name="radio-button"
  	tabindex="0"
  	checked>

  <label for="option-blue" class="nz--radio__label">
    <span class="nz--radio__appearance"></span>
    <span class="nz--radio__label-text">Blue shirt</span>
  </label>
</div>





&lt;div class="nz--form-item">
  &lt;label for="name" class="nz--label">Text Label&lt;/label>
  &lt;div class="nz--form__helper-text">
    Optional helper text here;
  &lt;/div>
  &lt;input id="name" type="text" class="nz--text-input" placeholder="Optional placeholder text">
 &lt;/div>

.nz--text-input {
	
}

.nz-form--dark {
	.nz--text-input {

	}
}


Aqui d√° vontade de no css fazer isso:
2. N√£o use Elementos
3. Use seletores de baixa especificade


// P√©ssimo
.nz--form-item input {
	
}

// Melhor, mas ruim, ficou bom, agora parece que piorou
.nz--form-item .nz--text-input {
	
}

// Topzeira
.nz--text-input {
	
}

4. N√£o dependa da hierarquia

nav ul li a {
	
}

.nz--nav .nz--nav__link {
	
}

.nz--nav__link {
	
}

(Tamb√©m n√£o √© legal)
.nz--nav {
	.nz--nav__link {

	}
}

Tem um motivo

/// RUIM
.nz--radio-wrapper {
	.nz--radio__label-text {

	}
}

.nz--checkbox-wrapper {
	.nz--checkbox__label-text {
	
	}
}


/// TOP
.nz--radio__label-text, .nz--checkbox__label-text {

}

Esse √© s√≥ um exemplo um exemplo, mas rola v√°rias situa√ß√µes que voc√™ pode reusar um elemento mas acaba criando uma nova classe no CSS para poder usar ele dentro de outra estrutura HTML e nesses casos compensa repensar a arquitetura do estilo

/// FOI PRA ESTRELA IRM√ÇO
.nz--label-text {

}

5. N√£o tenha medo de reescrever
O CSS perde o controle justamente porque a gente fica criando exce√ß√µes e colocando !important e geralmente a gente consegue resolver repensando como √© a nossa classifica√ß√£o

======================================================================================================

FINALIZANDO

Fazer o CSS bonitinho √© dificil realmente, tem muito quebrar a cara no processo, eu quebrei muito a cara j√°, tem muita coisa que eu vejo que eu fiz e se eu pudesse parava e refazia tudo com o que eu aprendi no processo

Mas da√≠ quais s√£o os impactos de verdade?

Isso n√£o √© um preciosismo pro c√≥digo ficar bonito s√≥ 
O Cristiano Rastelli | Implementa√ß√£o do Cosmos, o Design System do Badoo
https://medium.com/@didoo/measuring-the-impact-of-a-design-system-7f925af090f7

- Otimiza muito o tempo da empresa
- Diminui o esfor√ßo mental no processo. Voc√™ n√£o precisa se preocupar se vai usar 20px ou 21px s√≥ precisa saber que √© um $spacing-sm e est√° tudo certo
- A nomenclatura e organiza√ß√£o do CSS deixa quase imposs√≠vel acontecer os problemas de cascata, e voc√™ acaba usando a cascata ao seu favor
- A estrutura global deixa mais f√°cil criar temas

E porque fazer o CSS e n√£o usar o JS
- A primeira coisa √© que o CSS √© port√°vel. na empresa que eu trabalhei eu comecei desenvolvendo o Design System pro site principal, esse processo demandou um grande esfor√ßo, mas quando eu terminei escrever as outras p√°ginas foi muito r√°pido, e quando eu fui pra plataforma de pedido, tudo j√° estava praticamente pronto, s√≥ precisei de novos componentes.
Ent√£o se voc√™ precisar usar seu design system em wordpress ou numa outra aplica√ß√£o fica muito mais f√°cil.

- O problema de heran√ßa que o JS no CSS promete resolver acaba com a organiza√ß√£o bonitinha.

- Eu particularmente desgosto de misturar muito as coisas e o CSS no JS adiciona um outro n√≠vel de abstra√ß√£o.

- E separar o CSS do HTML e JS n√£o √© s√≥ minha lua em virgem;

- a internet √© realmente um espa√ßo aberto, em teoria qualquer um pode pegar e colocar o site no ar da sua loja, seu blog ou qualquer coisa.

- Eu sinto que muito dos movimentos s√£o um pouco ditados pelas grandes empresas e eu acho que a web n√£o pode perder essa ess√™ncia democr√°tica deixando todas as linguagens super otimizadas para efici√™ncias a qualquer custo.

- Mas √© isso pessoal, eu queria agradecer a aten√ß√£o e abrir pra d√∫vidas se alguem tiver

Falar do feedback